import { ref } from 'vue'
import { defineStore } from 'pinia'

export const useNoteStore = defineStore('NoteStore', () => {
  // =============================
  // 笔记目录
  // =============================

  const noteList = ref({
    vscode: { url: 'vscode' },
    html: { url: 'html' },
    css: { url: 'css' },
    js: { url: 'js' },
    vue: { name: 'vue', url: 'vue' },
    ajax: { name: 'ajax', url: 'ajax' },
    nodeJs: { name: 'node.js', url: 'node.js' },
    git: {
      说明: [
        '分布式的代码版本控制系统<br>创建一个git仓库，用于保存记录每个版本的代码，并存储修改记录，形成代码历史。且在多人开发时可以高效合并代码内容'
      ],
      系统配置指令: '',
      git仓库: {
        初始化仓库: [
          'git仓库是用于记录文件状态内容的地方，存储着修改的历史记录<br>可以使用以下两种方式创建git仓库',
          [
            ['git init', '把本地文件夹转为git仓库'],
            [
              'git clone 远程仓库地址',
              '从其他服务器克隆git仓库<br>◆ 仅能在新建仓库的情况下使用clone指令<br>◆ 克隆后无需再次添加git远程仓库地址'
            ]
          ]
        ],
        仓库工作区: [
          [
            [
              '工作区',
              '实际开发时操作的文件夹',
              [
                [
                  ['git add 文件名', '暂存指定文件'],
                  ['git add .', '暂存所有改动的文件']
                ],
                '<br>文件标识',
                [
                  ['未跟踪', 'U', '新文件 / 被移除过的文件。未被git保存过'],
                  ['已跟踪', 'A', 'git第一次保存的文件'],
                  ['未修改', '无标识', '已成功提交保存，即三个区域的版本统一'],
                  [
                    '已修改',
                    'M',
                    '保存过的文件，在工作区内发生改动，且未提交保存<br>◆ 提交暂存并不会移除M标识'
                  ]
                ],
                [
                  ['git status', '查看文件状态的详细信息'],
                  [
                    'git status -s',
                    [
                      '查看文件状态的简要信息',
                      [
                        ['<span style="color: red;">M</span>', '有文件在工作区发生改动，且未暂存'],
                        ['<span style="color: green;">M</span>', '有文件已暂存，但未提交保存'],
                        ['无内容提示', '所有文件均提交保存 / 内容无改动']
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              '暂存区',
              '暂存改动过的文件<br>保存至.git/index',
              [
                [
                  ['git ls-files', '查看暂存的文件'],
                  [
                    'git commit',
                    [
                      '暂存所有改动的文件',
                      [
                        ['-a', '直接将文件从工作区保存至版本库'],
                        ['-m "备注内容"', '备注内容']
                      ]
                    ]
                  ],
                  ['git restore 目标文件名', '将文件从暂存区复原并覆盖至工作区'],
                  ['git rm --cachaed 目标文件名', '从暂存区移除目标文件']
                ]
              ]
            ],
            [
              '版本库',
              '提交并保存的内容，并产生一个版本快照<br>保存至.git/objects',
              [
                '查看历史记录',
                [
                  ['git log', '查看当前分支历史记录的详细信息'],
                  ['git log --oneline', '查看当前分支历史记录的简要信息'],
                  ['git reflog --oneline', '查看所有分支历史记录的简要信息']
                ],
                '<br>版本覆盖',
                [
                  [
                    'git reset --soft 版本号',
                    '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 保留原文件，且全部更改为"未跟踪"状态'
                  ],
                  [
                    'git reset --hard 版本号',
                    '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 不保留原文件'
                  ],
                  [
                    [[['git reset'], ['git reset --mixed 版本号']], '效果等同'],
                    '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 不保留暂存区原文件<br>◆ 保留工作区原文件，且全部更改为"未跟踪"状态'
                  ]
                ]
              ]
            ]
          ]
        ]
      },
      文件说明: [''],
      分支: [''],
      远程仓库: [''],
      忽略文件: ['']
    },
    lua: { name: 'lua', url: 'lua' }
  })

  // =============================

  return {
    // 笔记目录
    noteList
  }
})
