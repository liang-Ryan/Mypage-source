import { ref } from 'vue'
import { defineStore } from 'pinia'

export const useNoteStore = defineStore('NoteStore', () => {
  // =============================
  // 笔记目录
  // =============================

  // 结构说明：
  //    以 数组 / 对象 （vue均判断为object）作为判断单位
  //    具备key的元素由Paragraph组件处理为一级/二级标题
  //    不具备key的元素由Cell组件进行判断，进行正文内容(字符串)或表格(数组/对象)的判断。
  //    * 字符串正文内容直接渲染
  //    * 表格内容调用Tables组件，生成表格结构，并进行遍历，遍历的单元格内容(数组元素/对象值)传递给Cell进行判断
  //    * 单元格内容既包含正文内容，又包含表格时：遍历单元格内容进行拆分，并将遍历结果(拆分结果)传递给Cell内容，再次判断
  //    * 非表格的正文内容可以视为单元格内容，与表格的单元格内容一起由Cell组件处理
  //
  //    分类名: {
  //      一级标题: [                        // Paragraph组件处理
  //        '正文内容',                      // Cell组件处理
  //
  //        二级标题: [                      // Paragraph组件处理
  //          '正文内容',                    // Cell组件处理
  //
  //          [                             // 表格 // Cell组件判断，Table组件处理
  //            [单元格内容,单元格内容],      // 表格行 // 由Tables组件进行遍历，并生成表格结构
  //                                        // Tables组件遍历的单元格内容，传递给Cell组件进行判断处理
  //
  //            [单元格内容,[                // 单元格的嵌套表格（单元格可多层嵌套表格）// Cell组件判断
  //              [单元格内容,单元格内容]     // 嵌套表格行 // Tabels组件判断处理
  //            ],单元格内容]
  //
  //            [单元格内容,[                // 单元格既有正文内容，同时嵌套表格 // Cell组件判断
  //              '正文内容',                // 单元格的正文内容 // Cell组件处理
  //              [                         // 单元格的嵌套表格（单元格可多层嵌套表格）// Cell组件判断
  //                [单元格内容,单元格内容]   // 嵌套表格行 // Tabels组件判断处理
  //              ]
  //            ]]
  //          ]
  //        ]
  //      ]
  //    }

  const noteList = ref({
    前端笔记: {
      html: { url: 'html' },
      css: { url: 'css' },
      js: { url: 'js' },
      vue: { name: 'vue', url: 'vue' },
      ajax: { name: 'ajax', url: 'ajax' },
      nodeJs: { name: 'node.js', url: 'node.js' }
    },
    其他编程笔记: {
      vscode: { url: 'vscode' },
      git: {
        说明: [
          '分布式的代码版本控制系统<br>创建一个git仓库，用于保存记录每个版本的代码，并存储修改记录，形成代码历史。且在多人开发时可以高效合并代码内容'
        ],
        系统配置指令: [
          [
            ['git -v', '查看版本号'],
            ['git config --global user.name "用户名"', '配置本机用户名'],
            ['git config --global user.email "用户邮箱"', '配置本机用户邮箱'],
            ['git config --list', '查看git配置'],
            ['git config --system --list', '查看系统配置'],
            ['git config --global --list', '查看当前用户配置']
          ]
        ],
        git仓库: {
          初始化仓库: [
            'git仓库是用于记录文件状态内容的地方，存储着修改的历史记录<br>可以使用以下两种方式创建git仓库',
            [
              ['把本地文件夹转为git仓库', 'git init'],
              [
                '从其他服务器克隆git仓库<br>◆ 仅能在新建仓库的情况下使用clone指令<br>◆ 克隆后无需再次添加git远程仓库地址',
                'git clone 远程仓库地址'
              ]
            ]
          ],
          仓库工作区: [
            [
              [
                '工作区',
                '实际开发时操作的文件夹',
                [
                  [
                    ['git add 文件名', '暂存指定文件'],
                    ['git add .', '暂存所有改动的文件']
                  ],
                  '<br>文件标识',
                  [
                    ['未跟踪', 'U', '新文件 / 被移除过的文件。未被git保存过'],
                    ['已跟踪', 'A', 'git第一次保存的文件'],
                    ['未修改', '无标识', '已成功提交保存，即三个区域的版本统一'],
                    [
                      '已修改',
                      'M',
                      '保存过的文件，在工作区内发生改动，且未提交保存<br>◆ 提交暂存并不会移除M标识'
                    ]
                  ],
                  [
                    ['git status', '查看文件状态的详细信息'],
                    [
                      'git status -s',
                      [
                        '查看文件状态的简要信息',
                        [
                          [
                            '<span style="color: red;">M</span>',
                            '有文件在工作区发生改动，且未暂存'
                          ],
                          ['<span style="color: green;">M</span>', '有文件已暂存，但未提交保存'],
                          ['无内容提示', '所有文件均提交保存 / 内容无改动']
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                '暂存区',
                '暂存改动过的文件<br>保存至.git/index',
                [
                  ['git ls-files', '查看暂存的文件'],
                  [
                    'git commit',
                    [
                      '暂存所有改动的文件',
                      [
                        ['-a', '直接将文件从工作区保存至版本库'],
                        ['-m "备注内容"', '备注内容']
                      ]
                    ]
                  ],
                  ['git restore 目标文件名', '将文件从暂存区复原并覆盖至工作区'],
                  ['git rm --cachaed 目标文件名', '从暂存区移除目标文件']
                ]
              ],
              [
                '版本库',
                '提交并保存的内容，并产生一个版本快照<br>保存至.git/objects',
                [
                  '查看历史记录',
                  [
                    ['git log', '查看当前分支历史记录的详细信息'],
                    ['git log --oneline', '查看当前分支历史记录的简要信息'],
                    ['git reflog --oneline', '查看所有分支历史记录的简要信息']
                  ],
                  '<br>版本覆盖',
                  [
                    [
                      'git reset --soft 版本号',
                      '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 保留原文件，且全部更改为"未跟踪"状态'
                    ],
                    [
                      'git reset --hard 版本号',
                      '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 不保留原文件'
                    ],
                    [
                      [[['git reset'], ['git reset --mixed 版本号']], '效果等同'],
                      '将版本库中的某个版本覆盖至工作区和暂存区<br>◆ 不保留暂存区原文件<br>◆ 保留工作区原文件，且全部更改为"未跟踪"状态'
                    ]
                  ]
                ]
              ]
            ]
          ]
        },
        分支: {
          定义: [
            [
              ['定义', '本质上是指向提交节点的可变指针，默认名为master'],
              ['用途', '开发新需求、修复BUG时，保证主线代码随时可用<br>提高多人协同开发的效率'],
              ['HRAD指针', '影响工作区和暂存区的代码状态<br>◆ HRAD指针指向当前分支指针']
            ]
          ],
          指令: [
            [
              ['查看分支', 'git branch'],
              ['创建分支', 'git branch 分支名<br>◆ 将在当前分支下创建新的分支'],
              ['创建并切换至新分支', 'git branch -b 分支名'],
              ['删除分支指针', 'git branch -d 分支名'],
              ['切换分支', 'git checkout 分支名'],
              [
                '合并分支',
                'git merge 分支名<br>◆ 应在主分支下执行该指令<br>◆ 若主分支在创建分支后，产生了新的提交记录，合并时将自动提交一次版本库保存<br>◆ 合并冲突只能手动操作'
              ]
            ]
          ]
        },
        远程仓库: [
          '第三方托管平台：Gitee、GitLab、GitHub',
          [
            [
              '添加git远程仓库',
              'git remote add 自定义远程仓库名 远程仓库地址<br>◆ 同一远程仓库名只能对应一个地址<br>◆ 修改远程仓库地址，只能先移除再添加'
            ],
            ['移除git远程仓库', 'git remote remove 自定义远程仓库名'],
            ['查看git远程仓库', 'git remote -v'],
            [
              '推送至远程仓库',
              [
                ['简要写法', 'git push -u 远程仓库名 本地和远程分支名'],
                ['完整写法', 'git push --set-upstream 远程仓库名 本地分支名:远程分支名']
              ]
            ],
            [
              '从远程仓库获取并合并',
              [
                [
                  'git pull 远程仓库名 本地分支名:远程分支名',
                  [
                    '◆ git pull为以下两条指令的整合写法',
                    [
                      [
                        'git fetch 远程仓库名 本地分支名:远程分支名',
                        '获取远程分支名<br>◆ 不执行合并分支'
                      ],
                      ['git merge 远程仓库名/远程分支名', '合并分支']
                    ]
                  ]
                ],
                [
                  'git pull --rebase 远程仓库名 本地分支名:远程分支名',
                  '变基：将分支移到一个新的基<br>用于将本地内容上传至新的远程仓库'
                ]
              ]
            ]
          ]
        ],
        忽略文件: [
          [
            [
              '.gitignore',
              [
                '在项目根目录新建.gitignore文件<br>填入相应配置，不再跟踪指定文件',
                [
                  ['系统或软件生成的文件', '.vscode<br>node_modules'],
                  ['编译产生的结果文件', 'dist'],
                  ['运行时生成的日志文件，缓存文件，临时文件等', '*.log'],
                  ['涉密文件，密码，秘钥等文件', '*.pem<br>*.cer'],
                  ['指定文件', '文件名<br>◆无需路径']
                ]
              ]
            ]
          ]
        ]
      },
      lua: { name: 'lua', url: 'lua' }
    }
  })

  // =============================

  return {
    // 笔记目录
    noteList
  }
})
